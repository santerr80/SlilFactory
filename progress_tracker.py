import json
import os
import logging
from datetime import datetime
from pathvalidate import sanitize_filename

logger = logging.getLogger(__name__)

class ProgressTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞"""
    
    def __init__(self, course_name, output_dir):
        self.course_name = course_name
        self.output_dir = output_dir
        self.progress_file = os.path.join(output_dir, f"{sanitize_filename(course_name)}_progress.json")
        self.progress_data = self._load_progress()
    
    def _load_progress(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.progress_file):
            try:
                with open(self.progress_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {len(data.get('completed', {}))} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                return data
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        new_progress = {
            "course_name": self.course_name,
            "created_at": datetime.now().isoformat(),
            "last_updated": datetime.now().isoformat(),
            "completed": {},  # block_id -> info
            "failed": {},     # block_id -> error_info
            "skipped": {},    # block_id -> reason
            "statistics": {
                "total_processed": 0,
                "total_size_mb": 0,
                "videos_downloaded": 0,
                "html_files_created": 0
            }
        }
        
        # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        try:
            with open(self.progress_file, 'w', encoding='utf-8') as f:
                json.dump(new_progress, f, ensure_ascii=False, indent=2)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {self.progress_file}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        
        return new_progress
    
    def _save_progress(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ JSON —Ñ–∞–π–ª"""
        try:
            self.progress_data["last_updated"] = datetime.now().isoformat()
            with open(self.progress_file, 'w', encoding='utf-8') as f:
                json.dump(self.progress_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")
    
    def _file_exists_and_valid(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –∏–º–µ–µ—Ç –ª–∏ –æ–Ω —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä"""
        if not file_path or not os.path.exists(file_path):
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(file_path)
            if file_size < 100:  # –§–∞–π–ª –º–µ–Ω—å—à–µ 100 –±–∞–π—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª–µ–Ω
                return False
            
            # –î–ª—è HTML —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if file_path.endswith('.html'):
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read(500)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ HTML —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    if '<html' not in content.lower() and '<body' not in content.lower():
                        return False
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ—à–∏–±–∫–æ–π
                    if len(content.strip()) < 50:
                        return False
            
            return True
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    def validate_and_cleanup_progress(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        logger.info("–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        cleaned_completed = {}
        cleaned_failed = {}
        updated_stats = {
            "total_processed": 0,
            "total_size_mb": 0,
            "videos_downloaded": 0,
            "html_files_created": 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for block_id, info in self.progress_data["completed"].items():
            file_path = info.get('file_path')
            
            if self._file_exists_and_valid(file_path):
                # –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∞–ª–∏–¥–µ–Ω - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                cleaned_completed[block_id] = info
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                updated_stats["total_processed"] += 1
                updated_stats["total_size_mb"] += info.get('file_size_mb', 0)
                if info.get('has_video', False):
                    updated_stats["videos_downloaded"] += 1
                if file_path and file_path.endswith('.html'):
                    updated_stats["html_files_created"] += 1
                    
                logger.debug(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {info.get('display_name', block_id)}")
            else:
                # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
                logger.warning(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —É–¥–∞–ª—è—é –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {info.get('display_name', block_id)} -> {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –º–æ–∂–µ–º –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ
        for block_id, info in self.progress_data["failed"].items():
            # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            cleaned_failed[block_id] = info
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        removed_count = len(self.progress_data["completed"]) - len(cleaned_completed)
        if removed_count > 0:
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ {removed_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏")
            
            self.progress_data["completed"] = cleaned_completed
            self.progress_data["failed"] = cleaned_failed
            self.progress_data["statistics"] = updated_stats
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            self.progress_data["last_validated"] = datetime.now().isoformat()
            
            self._save_progress()
            logger.info("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
        else:
            logger.info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–π–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    def is_completed(self, block_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –±–ª–æ–∫"""
        return block_id in self.progress_data["completed"]
    
    def mark_completed(self, block_id, block_data, file_path=None, file_size_mb=0, has_video=False):
        """–û—Ç–º–µ—á–∞–µ—Ç –±–ª–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"""
        self.progress_data["completed"][block_id] = {
            "display_name": block_data.get('display_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            "type": block_data.get('type', 'unknown'),
            "completed_at": datetime.now().isoformat(),
            "file_path": file_path,
            "file_size_mb": round(file_size_mb, 2),
            "has_video": has_video
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.progress_data["statistics"]
        stats["total_processed"] += 1
        stats["total_size_mb"] += file_size_mb
        if has_video:
            stats["videos_downloaded"] += 1
        if file_path and file_path.endswith('.html'):
            stats["html_files_created"] += 1
        
        self._save_progress()
        logger.debug(f"–û—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π: {block_data.get('display_name', block_id)}")
    
    def mark_failed(self, block_id, block_data, error_message):
        """–û—Ç–º–µ—á–∞–µ—Ç –±–ª–æ–∫ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π"""
        self.progress_data["failed"][block_id] = {
            "display_name": block_data.get('display_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            "type": block_data.get('type', 'unknown'),
            "failed_at": datetime.now().isoformat(),
            "error": str(error_message)
        }
        self._save_progress()
        logger.warning(f"–û—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π: {block_data.get('display_name', block_id)} - {error_message}")
    
    def mark_skipped(self, block_id, block_data, reason):
        """–û—Ç–º–µ—á–∞–µ—Ç –±–ª–æ–∫ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π"""
        self.progress_data["skipped"][block_id] = {
            "display_name": block_data.get('display_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            "type": block_data.get('type', 'unknown'),
            "skipped_at": datetime.now().isoformat(),
            "reason": reason
        }
        self._save_progress()
        logger.debug(f"–û—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π: {block_data.get('display_name', block_id)} - {reason}")
    
    def get_statistics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        stats = self.progress_data["statistics"].copy()
        stats.update({
            "completed_count": len(self.progress_data["completed"]),
            "failed_count": len(self.progress_data["failed"]),
            "skipped_count": len(self.progress_data["skipped"])
        })
        return stats
    
    def print_progress_table(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*80)
        print(f"–ü–†–û–ì–†–ï–°–° –°–ö–ê–ß–ò–í–ê–ù–ò–Ø: {self.course_name}")
        print("="*80)
        
        stats = self.get_statistics()
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_count']}")
        print(f"   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω–æ: {stats['failed_count']}")
        print(f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped_count']}")
        print(f"   ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size_mb']:.1f} –ú–ë")
        print(f"   ‚Ä¢ HTML —Ñ–∞–π–ª–æ–≤: {stats['html_files_created']}")
        print(f"   ‚Ä¢ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {stats['videos_downloaded']}")
        
        if self.progress_data["completed"]:
            print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ({len(self.progress_data['completed'])}):")
            print("-" * 80)
            for block_id, info in self.progress_data["completed"].items():
                size_info = f" ({info['file_size_mb']:.1f} –ú–ë)" if info['file_size_mb'] > 0 else ""
                video_info = " üé•" if info['has_video'] else ""
                print(f"   {info['display_name'][:60]:<60} {size_info:<10} {video_info}")
        
        if self.progress_data["failed"]:
            print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ({len(self.progress_data['failed'])}):")
            print("-" * 80)
            for block_id, info in self.progress_data["failed"].items():
                print(f"   {info['display_name'][:50]:<50} | {info['error'][:25]}")
        
        if self.progress_data["skipped"]:
            print(f"\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ({len(self.progress_data['skipped'])}):")
            print("-" * 80)
            for block_id, info in self.progress_data["skipped"].items():
                print(f"   {info['display_name'][:50]:<50} | {info['reason'][:25]}")
        
        print("="*80)
    
    def get_resume_point(self, all_blocks):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–∫—É –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        completed_ids = set(self.progress_data["completed"].keys())
        failed_ids = set(self.progress_data["failed"].keys())
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        remaining_blocks = []
        for block_id, block_data in all_blocks.items():
            if block_id not in completed_ids and block_id not in failed_ids:
                remaining_blocks.append((block_id, block_data))
        
        return remaining_blocks
    
    def should_skip_block(self, block_id, force_overwrite=False):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        if force_overwrite:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª–æ–∫ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
        if block_id not in self.progress_data["completed"]:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        block_info = self.progress_data["completed"][block_id]
        file_path = block_info.get('file_path')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω–æ
        if self._file_exists_and_valid(file_path):
            return True  # –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∞–ª–∏–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        else:
            # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
            logger.warning(f"üîÑ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–∫–∞—á–∏–≤–∞—é: {block_info.get('display_name', block_id)} -> {file_path}")
            del self.progress_data["completed"][block_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.progress_data["statistics"]
            stats["total_processed"] = max(0, stats["total_processed"] - 1)
            stats["total_size_mb"] = max(0, stats["total_size_mb"] - block_info.get('file_size_mb', 0))
            if block_info.get('has_video', False):
                stats["videos_downloaded"] = max(0, stats["videos_downloaded"] - 1)
            if file_path and file_path.endswith('.html'):
                stats["html_files_created"] = max(0, stats["html_files_created"] - 1)
            
            self._save_progress()
            return False  # –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    
    def cleanup_progress_file(self):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)"""
        if os.path.exists(self.progress_file):
            os.remove(self.progress_file)
            logger.info("–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω") 