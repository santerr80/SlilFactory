#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ SkillFactory
"""

import argparse
import os
import json
import sys
from pathvalidate import sanitize_filename
from progress_tracker import ProgressTracker

def list_progress_files(directory="."):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    progress_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith('_progress.json'):
                progress_files.append(os.path.join(root, file))
    return progress_files

def show_progress_summary(progress_file):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ñ–∞–π–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        with open(progress_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        course_name = data.get('course_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å')
        stats = data.get('statistics', {})
        completed = len(data.get('completed', {}))
        failed = len(data.get('failed', {}))
        skipped = len(data.get('skipped', {}))
        
        print(f"\nüìö {course_name}")
        print(f"   üìÅ {progress_file}")
        print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
        print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
        print(f"   üìä –†–∞–∑–º–µ—Ä: {stats.get('total_size_mb', 0):.1f} –ú–ë")
        print(f"   üé• –í–∏–¥–µ–æ: {stats.get('videos_downloaded', 0)}")
        print(f"   üìÑ HTML: {stats.get('html_files_created', 0)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {progress_file}: {e}")

def show_detailed_progress(progress_file):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    try:
        with open(progress_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        course_name = data.get('course_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ print_progress_table
        temp_dir = os.path.dirname(progress_file)
        tracker = ProgressTracker(course_name, temp_dir)
        tracker.progress_data = data
        tracker.print_progress_table()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {progress_file}: {e}")

def clean_progress_file(progress_file):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        os.remove(progress_file)
        print(f"‚úÖ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω: {progress_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {progress_file}: {e}")

def reset_failed_items(progress_file):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    try:
        with open(progress_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        failed_count = len(data.get('failed', {}))
        if failed_count == 0:
            print("–ù–µ—É–¥–∞—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –û—á–∏—â–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        data['failed'] = {}
        
        with open(progress_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ {failed_count} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ {progress_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")

def main():
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ SkillFactory")
    parser.add_argument('--list', '-l', action='store_true', help="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    parser.add_argument('--show', '-s', help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ñ–∞–π–ª–∞")
    parser.add_argument('--summary', help="–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è —Ñ–∞–π–ª–∞")
    parser.add_argument('--clean', '-c', help="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    parser.add_argument('--reset-failed', '-r', help="–°–±—Ä–æ—Å–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
    parser.add_argument('--directory', '-d', default='.', help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    
    args = parser.parse_args()
    
    if args.list:
        print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
        progress_files = list_progress_files(args.directory)
        
        if not progress_files:
            print("–§–∞–π–ª—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {len(progress_files)}")
        print("=" * 80)
        
        for pf in progress_files:
            show_progress_summary(pf)
        
        print("=" * 80)
        print("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --show <—Ñ–∞–π–ª> –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --clean <—Ñ–∞–π–ª> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
        
    elif args.show:
        if not os.path.exists(args.show):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.show}")
            return
        show_detailed_progress(args.show)
        
    elif args.summary:
        if not os.path.exists(args.summary):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.summary}")
            return
        show_progress_summary(args.summary)
        
    elif args.clean:
        if not os.path.exists(args.clean):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.clean}")
            return
        
        confirm = input(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {args.clean}? (y/N): ")
        if confirm.lower() in ['y', 'yes']:
            clean_progress_file(args.clean)
        else:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
            
    elif args.reset_failed:
        if not os.path.exists(args.reset_failed):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.reset_failed}")
            return
        
        confirm = input(f"–°–±—Ä–æ—Å–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ {args.reset_failed}? (y/N): ")
        if confirm.lower() in ['y', 'yes']:
            reset_failed_items(args.reset_failed)
        else:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
            
    else:
        parser.print_help()

if __name__ == '__main__':
    main() 